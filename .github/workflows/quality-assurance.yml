name: Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black isort flake8 mypy bandit safety

    - name: Code formatting check
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/

    - name: Linting
      run: |
        flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503

    - name: Type checking
      run: |
        mypy src/ --ignore-missing-imports

    - name: Security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Golden tests
      run: |
        python -m src.code_explainer.golden_tests

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  integration-tests:
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run integration tests
      run: |
        python scripts/enhanced_eval.py --list-datasets
        python scripts/enhanced_eval.py --datasets demo-addsub --no-perf --report

    - name: API smoke tests
      run: |
        # Start API in background
        python -m uvicorn src.code_explainer.api.server:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/version || exit 1

        # Stop API
        kill $API_PID

  security-checks:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Run performance benchmarks
      run: |
        python scripts/enhanced_eval.py --datasets demo-addsub demo-fizzbuzz --report

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: eval_results/

  release-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [quality-checks, integration-tests, security-checks]

    steps:
    - uses: actions/checkout@v4

    - name: Check if version changed
      id: version-check
      run: |
        # Get current version from __init__.py
        CURRENT_VERSION=$(python -c "from src.code_explainer import __version__; print(__version__)")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

        # Check if this is a new version tag
        if git tag -l | grep -q "v$CURRENT_VERSION"; then
          echo "version_changed=false" >> $GITHUB_OUTPUT
        else
          echo "version_changed=true" >> $GITHUB_OUTPUT
        fi

    - name: Create release tag
      if: steps.version-check.outputs.version_changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ steps.version-check.outputs.current_version }}" -m "Release v${{ steps.version-check.outputs.current_version }}"
        git push origin "v${{ steps.version-check.outputs.current_version }}"
