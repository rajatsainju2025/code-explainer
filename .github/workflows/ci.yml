name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Exclude Python 3.8 on Windows (not officially supported)
          - os: windows-latest
            python-version: "3.8"
        include:
          # Add specific test combinations for broader coverage
          - os: ubuntu-latest
            python-version: "3.12"
            experimental: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt', 'pyproject.toml', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run linting and type checking
        run: |
          black --check src/ tests/
          isort --check-only src/ tests/
          flake8 src/ tests/
          mypy src/

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short

      - name: Run integration tests (Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          pytest tests/ -k "integration or test_api_v2 or test_integration_new_features" --tb=short -x

      - name: Run security tests
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        run: |
          pytest tests/test_security.py -v --tb=short

      - name: Run performance regression tests
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        run: |
          pytest tests/test_performance_regression.py -v --tb=short --durations=10

      - name: Run API smoke tests
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        run: |
          # Start API server in background
          python -m uvicorn code_explainer.api.server:app --host 0.0.0.0 --port 8000 &
          API_PID=$!
          sleep 15

          # Test v2 endpoints
          curl -f http://localhost:8000/api/v2/health || exit 1
          curl -f http://localhost:8000/api/v2/performance || exit 1

          # Test v1 compatibility
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/version || exit 1

          # Stop API server
          kill $API_PID || true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
        with:
          fail_ci_if_error: false

  dataset-validation:
    name: Dataset Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .

      - name: Validate datasets
        run: |
          python scripts/validate_dataset.py data/train.json || echo "Train dataset validation failed"
          python scripts/validate_dataset.py data/eval.json || echo "Eval dataset validation failed"
          python scripts/validate_dataset.py data/test.json || echo "Test dataset validation failed"
