version: '3.8'

services:
  # Main API service
  api:
    build:
      context: .
      target: development
    ports:
      - "8000:8000"  # API
      - "8001:8001"  # Docs
    volumes:
      - .:/app
      - ./results:/app/results
      - ./data:/app/data
      - ./.cache:/app/.cache
    environment:
      - DEV=true
      - CODE_EXPLAINER_MODEL_PATH=/app/results
      - CODE_EXPLAINER_CONFIG_PATH=/app/configs/default.yaml
      - CODE_EXPLAINER_RETRIEVAL_WARMUP=true
      - CODE_EXPLAINER_API_KEY=${CODE_EXPLAINER_API_KEY:-dev-key-12345}
      - CORS_ALLOWED_ORIGINS=http://localhost:8501,http://localhost:7860
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app/src
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    command: uvicorn code_explainer.api.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/src
    networks:
      - code-explainer-net

  # Streamlit Web UI service
  streamlit:
    build:
      context: .
      target: development
    ports:
      - "8501:8501"
    volumes:
      - .:/app
    environment:
      - DEV=true
      - API_URL=http://api:8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app/src
    depends_on:
      - api
    restart: unless-stopped
    command: streamlit run streamlit_app.py --server.address 0.0.0.0 --server.port 8501
    networks:
      - code-explainer-net

  # Gradio UI (alternative, started with --profile gradio)
  gradio:
    build:
      context: .
      target: development
    ports:
      - "7860:7860"
    volumes:
      - .:/app
    environment:
      - DEV=true
      - API_URL=http://api:8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONPATH=/app/src
    depends_on:
      - api
    restart: unless-stopped
    command: python app.py
    networks:
      - code-explainer-net
    profiles:
      - gradio

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped
    networks:
      - code-explainer-net

  # Prometheus for metrics (started with --profile monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: code-explainer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - code-explainer-net
    profiles:
      - monitoring

  # Grafana for visualization (started with --profile monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: code-explainer-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/code-explainer.json:ro
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - code-explainer-net
    profiles:
      - monitoring

networks:
  code-explainer-net:
    driver: bridge

volumes:
  redis_data:
  prometheus-data:
  grafana-data:

  # Testing service
  test:
    build:
      context: .
      target: testing
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app/src
    command: pytest tests/ -v --tb=short
    profiles:
      - testing

  # Documentation server
  docs:
    build:
      context: .
      target: development
    ports:
      - "8002:8000"
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app/src
    command: mkdocs serve -a 0.0.0.0:8000
    profiles:
      - docs

volumes:
  redis_data:

networks:
  default:
    name: code-explainer-network